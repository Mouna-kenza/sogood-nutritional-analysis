#!/usr/bin/env python3
"""
Script de d√©marrage pour SoGood
"""
import subprocess
import sys
import os
import logging
from pathlib import Path

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def check_dependencies():
    """V√©rifie que les d√©pendances sont install√©es"""
    try:
        import fastapi
        import sqlalchemy
        import pandas
        logger.info("‚úÖ D√©pendances Python OK")
        return True
    except ImportError as e:
        logger.error(f"‚ùå D√©pendance manquante: {e}")
        return False

def check_database():
    """V√©rifie la connexion √† la base de donn√©es"""
    try:
        from backend.database import check_database_connection
        if check_database_connection():
            logger.info("‚úÖ Base de donn√©es connect√©e")
            return True
        else:
            logger.error("‚ùå Impossible de se connecter √† la base de donn√©es")
            return False
    except Exception as e:
        logger.error(f"‚ùå Erreur base de donn√©es: {e}")
        return False

def load_sample_data():
    """Charge un √©chantillon de donn√©es pour tester"""
    try:
        logger.info("üìä Chargement d'un √©chantillon de donn√©es...")
        subprocess.run([
            sys.executable, "scripts/load_data.py", 
            "--max-rows", "1000"
        ], check=True)
        logger.info("‚úÖ Donn√©es d'exemple charg√©es")
        return True
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå Erreur chargement donn√©es: {e}")
        return False

def start_api():
    """D√©marre l'API FastAPI"""
    try:
        logger.info("üöÄ D√©marrage de l'API...")
        subprocess.run([
            sys.executable, "-m", "uvicorn", 
            "backend.main:app", "--reload", "--host", "0.0.0.0", "--port", "8000"
        ], check=True)
    except KeyboardInterrupt:
        logger.info("üõë Arr√™t de l'API")
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå Erreur d√©marrage API: {e}")

def main():
    """Point d'entr√©e principal"""
    logger.info("ü•ó D√©marrage de SoGood - Analyse Nutritionnelle")
    
    # V√©rifications pr√©liminaires
    if not check_dependencies():
        logger.error("‚ùå V√©rifiez l'installation des d√©pendances: pip install -r requirements.txt")
        return 1
    
    if not check_database():
        logger.error("‚ùå V√©rifiez la configuration de la base de donn√©es")
        logger.info("üí° Lancez: docker-compose up -d postgres")
        return 1
    
    # Chargement des donn√©es si n√©cessaire
    answer = input("üìä Charger des donn√©es d'exemple? (y/N): ")
    if answer.lower() in ['y', 'yes', 'o', 'oui']:
        if not load_sample_data():
            logger.warning("‚ö†Ô∏è √âchec du chargement des donn√©es, mais on continue...")
    
    # D√©marrage de l'API
    start_api()
    
    return 0

if __name__ == "__main__":
    sys.exit(main()) 